input AddPostInput {
  committeeId: ID!
  name: String!
  clientMutationId: String
}

type AddPostPayload {
  committee: Committee
  postEdge: PostEdge
  clientMutationId: String
}

type App {
  committees: [Committee]
  events(startDate: String, endDate: String): [Event]
}

type Committee implements Node {
  addedOn: String
  updatedOn: String
  addedBy: User

  # The ID of an object
  id: ID!
  name: String
  description: String

  # A committee members
  members(after: String, first: Int, before: String, last: Int): UserConnection

  # A committee posts
  posts(after: String, first: Int, before: String, last: Int): PostConnection

  # A committee events
  events(after: String, first: Int, before: String, last: Int): EventConnection
}

# A connection to a list of items.
type CommitteeConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [CommitteeEdge]
}

# An edge in a connection.
type CommitteeEdge {
  # The item at the end of the edge
  node: Committee

  # A cursor for use in pagination
  cursor: String!
}

type Event implements Node {
  addedOn: String
  updatedOn: String
  addedBy: User

  # The ID of an object
  id: ID!
  name: String
  description: String
  startDate: String
  endDate: String
  committee: Committee
}

# A connection to a list of items.
type EventConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [EventEdge]
}

# An edge in a connection.
type EventEdge {
  # The item at the end of the edge
  node: Event

  # A cursor for use in pagination
  cursor: String!
}

type Message implements Node {
  addedOn: String
  updatedOn: String
  addedBy: User

  # The ID of an object
  id: ID!
  content: String
}

# A connection to a list of items.
type MessageConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [MessageEdge]
}

# An edge in a connection.
type MessageEdge {
  # The item at the end of the edge
  node: Message

  # A cursor for use in pagination
  cursor: String!
}

type Mutation {
  addPost(input: AddPostInput!): AddPostPayload
  writeMessage(input: WriteMessageInput!): WriteMessagePayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Post implements Node {
  addedOn: String
  updatedOn: String
  addedBy: User

  # The ID of an object
  id: ID!
  name: String
  importance: Int

  # A post committee
  committee: Committee

  # A post messages
  messages(after: String, first: Int, before: String, last: Int): MessageConnection
}

# A connection to a list of items.
type PostConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [PostEdge]
}

# An edge in a connection.
type PostEdge {
  # The item at the end of the edge
  node: Post

  # A cursor for use in pagination
  cursor: String!
}

type Query {
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
  viewer: User
  app: App
}

type User implements Node {
  # The ID of an object
  id: ID!
  email: String
  firstname: String
  lastname: String
  name: String

  # A user committees
  committees(after: String, first: Int, before: String, last: Int): CommitteeConnection
}

# A connection to a list of items.
type UserConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [UserEdge]
}

# An edge in a connection.
type UserEdge {
  # The item at the end of the edge
  node: User

  # A cursor for use in pagination
  cursor: String!
}

input WriteMessageInput {
  postId: ID!
  content: String!
  clientMutationId: String
}

type WriteMessagePayload {
  post: Post
  messageEdge: MessageEdge
  clientMutationId: String
}
